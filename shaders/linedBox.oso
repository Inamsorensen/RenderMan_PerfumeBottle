OpenShadingLanguage 1.00
# Compiled by oslc 1.6.2dev
shader linedBox
param	color	Cin	1 1 1		%read{2147483647,-1} %write{2147483647,-1}
param	float	posT	0.69999999		%read{4,33} %write{2147483647,-1}
param	float	posB	0.30000001		%read{6,29} %write{2147483647,-1}
param	float	posL	0.30000001		%read{8,39} %write{2147483647,-1}
param	float	posR	0.69999999		%read{10,45} %write{2147483647,-1}
param	float	linewidth	0.0099999998		%read{12,45} %write{2147483647,-1}
oparam	color	Cout	1 1 1		%read{2147483647,-1} %write{50,54}
oparam	float	mask	0		%read{2147483647,-1} %write{51,55}
global	float	u	%read{0,0} %write{2147483647,-1}
global	float	v	%read{1,1} %write{2147483647,-1}
local	float	s	%read{8,46} %write{0,0}
local	float	t	%read{4,34} %write{1,1}
local	color	red	%read{50,50} %write{2,2}
local	color	green	%read{52,54} %write{3,3}
local	float	distT	%read{12,12} %write{5,5}
local	float	distB	%read{15,15} %write{7,7}
local	float	distL	%read{20,20} %write{9,9}
local	float	distR	%read{25,25} %write{11,11}
const	color	$const1	1 0 0		%read{2,2} %write{2147483647,-1}
const	color	$const2	0 1 0		%read{3,3} %write{2147483647,-1}
temp	float	$tmp1	%read{5,5} %write{4,4}
temp	float	$tmp2	%read{7,7} %write{6,6}
temp	float	$tmp3	%read{9,9} %write{8,8}
temp	float	$tmp4	%read{11,11} %write{10,10}
temp	int	$tmp5	%read{13,13} %write{12,12}
temp	int	$tmp6	%read{14,18} %write{13,17}
const	int	$const3	0		%read{13,55} %write{2147483647,-1}
temp	int	$tmp7	%read{16,16} %write{15,15}
temp	int	$tmp8	%read{17,17} %write{16,16}
temp	int	$tmp9	%read{19,23} %write{18,22}
temp	int	$tmp10	%read{21,21} %write{20,20}
temp	int	$tmp11	%read{22,22} %write{21,21}
temp	int	$tmp12	%read{24,28} %write{23,27}
temp	int	$tmp13	%read{26,26} %write{25,25}
temp	int	$tmp14	%read{27,27} %write{26,26}
temp	float	$tmp15	%read{30,30} %write{29,29}
temp	int	$tmp16	%read{31,31} %write{30,30}
temp	int	$tmp17	%read{32,37} %write{31,36}
temp	float	$tmp18	%read{34,34} %write{33,33}
temp	int	$tmp19	%read{35,35} %write{34,34}
temp	int	$tmp20	%read{36,36} %write{35,35}
temp	int	$tmp21	%read{38,43} %write{37,42}
temp	float	$tmp22	%read{40,40} %write{39,39}
temp	int	$tmp23	%read{41,41} %write{40,40}
temp	int	$tmp24	%read{42,42} %write{41,41}
temp	int	$tmp25	%read{44,49} %write{43,48}
temp	float	$tmp26	%read{46,46} %write{45,45}
temp	int	$tmp27	%read{47,47} %write{46,46}
temp	int	$tmp28	%read{48,48} %write{47,47}
const	int	$const4	1		%read{51,51} %write{2147483647,-1}
code ___main___
# linedBox.osl:25
# 	float s=u;
	assign		s u 	%filename{"linedBox.osl"} %line{25} %argrw{"wr"}
# linedBox.osl:26
# 	float t=v;
	assign		t v 	%line{26} %argrw{"wr"}
# linedBox.osl:28
# 	color red=color(1.0,0.0,0.0);
	assign		red $const1 	%line{28} %argrw{"wr"}
# linedBox.osl:29
# 	color green=color(0.0,1.0,0.0);
	assign		green $const2 	%line{29} %argrw{"wr"}
# linedBox.osl:32
# 	float distT=abs(t-posT);
	sub		$tmp1 t posT 	%line{32} %argrw{"wrr"}
	abs		distT $tmp1 	%argrw{"wr"}
# linedBox.osl:33
# 	float distB=abs(t-posB);
	sub		$tmp2 t posB 	%line{33} %argrw{"wrr"}
	abs		distB $tmp2 	%argrw{"wr"}
# linedBox.osl:34
# 	float distL=abs(s-posL);
	sub		$tmp3 s posL 	%line{34} %argrw{"wrr"}
	abs		distL $tmp3 	%argrw{"wr"}
# linedBox.osl:35
# 	float distR=abs(s-posR);
	sub		$tmp4 s posR 	%line{35} %argrw{"wrr"}
	abs		distR $tmp4 	%argrw{"wr"}
# linedBox.osl:38
# 	if(distT<=linewidth || distB<=linewidth || distL<=linewidth || distR<=linewidth)
	le		$tmp5 distT linewidth 	%line{38} %argrw{"wrr"}
	neq		$tmp6 $tmp5 $const3 	%argrw{"wrr"}
	if		$tmp6 15 18 	%argrw{"r"}
	le		$tmp7 distB linewidth 	%argrw{"wrr"}
	neq		$tmp8 $tmp7 $const3 	%argrw{"wrr"}
	assign		$tmp6 $tmp8 	%argrw{"wr"}
	neq		$tmp9 $tmp6 $const3 	%argrw{"wrr"}
	if		$tmp9 20 23 	%argrw{"r"}
	le		$tmp10 distL linewidth 	%argrw{"wrr"}
	neq		$tmp11 $tmp10 $const3 	%argrw{"wrr"}
	assign		$tmp9 $tmp11 	%argrw{"wr"}
	neq		$tmp12 $tmp9 $const3 	%argrw{"wrr"}
	if		$tmp12 25 28 	%argrw{"r"}
	le		$tmp13 distR linewidth 	%argrw{"wrr"}
	neq		$tmp14 $tmp13 $const3 	%argrw{"wrr"}
	assign		$tmp12 $tmp14 	%argrw{"wr"}
	if		$tmp12 54 56 	%argrw{"r"}
# linedBox.osl:40
# 		if (t>=(posB-linewidth) && t<=(posT+linewidth) && s>=(posL-linewidth) && s<=(posR+linewidth))
	sub		$tmp15 posB linewidth 	%line{40} %argrw{"wrr"}
	ge		$tmp16 t $tmp15 	%argrw{"wrr"}
	neq		$tmp17 $tmp16 $const3 	%argrw{"wrr"}
	if		$tmp17 37 37 	%argrw{"r"}
	add		$tmp18 posT linewidth 	%argrw{"wrr"}
	le		$tmp19 t $tmp18 	%argrw{"wrr"}
	neq		$tmp20 $tmp19 $const3 	%argrw{"wrr"}
	assign		$tmp17 $tmp20 	%argrw{"wr"}
	neq		$tmp21 $tmp17 $const3 	%argrw{"wrr"}
	if		$tmp21 43 43 	%argrw{"r"}
	sub		$tmp22 posL linewidth 	%argrw{"wrr"}
	ge		$tmp23 s $tmp22 	%argrw{"wrr"}
	neq		$tmp24 $tmp23 $const3 	%argrw{"wrr"}
	assign		$tmp21 $tmp24 	%argrw{"wr"}
	neq		$tmp25 $tmp21 $const3 	%argrw{"wrr"}
	if		$tmp25 49 49 	%argrw{"r"}
	add		$tmp26 posR linewidth 	%argrw{"wrr"}
	le		$tmp27 s $tmp26 	%argrw{"wrr"}
	neq		$tmp28 $tmp27 $const3 	%argrw{"wrr"}
	assign		$tmp25 $tmp28 	%argrw{"wr"}
	if		$tmp25 52 54 	%argrw{"r"}
# linedBox.osl:42
# 			Cout=red;
	assign		Cout red 	%line{42} %argrw{"wr"}
# linedBox.osl:43
# 			mask=1;
	assign		mask $const4 	%line{43} %argrw{"wr"}
# linedBox.osl:47
# 			Cout=green;
	assign		Cout green 	%line{47} %argrw{"wr"}
# linedBox.osl:48
# 			mask=0;
	assign		mask $const3 	%line{48} %argrw{"wr"}
# linedBox.osl:53
# 		Cout=green;
	assign		Cout green 	%line{53} %argrw{"wr"}
# linedBox.osl:54
# 		mask=0;
	assign		mask $const3 	%line{54} %argrw{"wr"}
	end
